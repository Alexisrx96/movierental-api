# Generated by Django 3.2.9 on 2021-11-26 06:55

import django.core.validators
import django.db.models.deletion
import django.db.models.functions.datetime
from django.db import migrations, models

import casts.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('casts', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=120, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Film',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('stock', models.PositiveIntegerField(default=0)),
                ('price', models.DecimalField(decimal_places=2, default=1.0, max_digits=5, validators=[django.core.validators.MinValueValidator(1)])),
                ('release_date', models.DateField(validators=[casts.models.validate_date_not_in_future])),
            ],
        ),
        migrations.CreateModel(
            name='Season',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('film', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='seasons', to='films.film')),
                ('prequel', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.RESTRICT, related_name='sequel_movie', to='films.season')),
                ('sequel', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.RESTRICT, to='films.season')),
            ],
            options={
                'unique_together': {('film', 'title')},
            },
        ),
        migrations.CreateModel(
            name='FilmCast',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cast', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='casts.cast')),
                ('movie', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='films.film')),
                ('role', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='casts.castrole')),
            ],
            options={
                'unique_together': {('movie', 'cast', 'role')},
            },
        ),
        migrations.AddField(
            model_name='film',
            name='casts',
            field=models.ManyToManyField(through='films.FilmCast', to='casts.Cast'),
        ),
        migrations.AddField(
            model_name='film',
            name='category',
            field=models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, related_name='films', to='films.category'),
        ),
        migrations.AddField(
            model_name='film',
            name='roles',
            field=models.ManyToManyField(through='films.FilmCast', to='casts.CastRole'),
        ),
        migrations.CreateModel(
            name='Chapter',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('number', models.PositiveIntegerField()),
                ('season', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='chapters', to='films.season')),
            ],
        ),
        migrations.AddConstraint(
            model_name='film',
            constraint=models.CheckConstraint(check=models.Q(('release_date__lte', django.db.models.functions.datetime.Now())), name='release_date_cannot_be_future_dated'),
        ),
        migrations.AlterUniqueTogether(
            name='chapter',
            unique_together={('season', 'number'), ('season', 'title')},
        ),
    ]
